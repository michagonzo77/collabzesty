tools:
  - name: remove-customer-managed-policy-from-sso
    description: 'Remove a customer managed policy from an SSO permission set and deletes the policy - CAUTION: This action is irreversible'
    type: python
    alias: remove-sso-policy
    content: |
      import boto3
      from botocore.exceptions import ClientError
      import os
      import sys
      import configparser
      import time
      
      permission_set_arn = """{{.permission_set_arn}}"""
      instance_arn = os.getenv('SSO_INSTANCE_ARN')
      # get the account id from STS
      sts_client = boto3.client('sts')
      target_id = sts_client.get_caller_identity()['Account']

      if not instance_arn:
          print("Error: Environment variable SSO_INSTANCE_ARN not set.")
          sys.exit(1)
          
      session = boto3.Session()

      # Initialize boto3 clients
      iam_client = session.client('iam')
      sso_admin_client = session.client('sso-admin')

      def detach_policy_from_permission_set(policy_name, instance_arn, permission_set_arn):
          sso_admin_client.detach_customer_managed_policy_reference_from_permission_set(
              CustomerManagedPolicyReference={
                  'Name': policy_name,
                  'Path': '/'
              },
              InstanceArn=instance_arn,
              PermissionSetArn=permission_set_arn
          )
          print(f"Detached policy {policy_name} from permission set.")

      def update_permission_set(instance_arn, permission_set_arn):
          sso_admin_client.update_permission_set(
              InstanceArn=instance_arn,
              PermissionSetArn=permission_set_arn,
              Description='Updated to remove policy',
              SessionDuration='PT1H'
          )
          print(f"Updated permission set {permission_set_arn}.")

      def provision_permission_set(instance_arn, permission_set_arn, target_id):
          sso_admin_client.provision_permission_set(
              InstanceArn=instance_arn,
              PermissionSetArn=permission_set_arn,
              TargetId=target_id,
              TargetType='AWS_ACCOUNT'
          )
          print(f"Provisioned permission set {permission_set_arn} to target {target_id}.")

      try:
          # Detach the policy from the specified permission set
          detach_policy_from_permission_set(policy_name, instance_arn, permission_set_arn)
          
          # Update the permission set to ensure the policy is removed
          update_permission_set(instance_arn, permission_set_arn)
          
          # Provision the permission set
          provision_permission_set(instance_arn, permission_set_arn, target_id)

          # Find the policy ARN
          response = iam_client.list_policies(Scope='Local')
          policy_arn = None
          for policy in response['Policies']:
              if policy['PolicyName'] == policy_name:
                  policy_arn = policy['Arn']
                  break

          if policy_arn is None:
              print(f"Error: Policy {policy_name} not found.")
              sys.exit(1)

          # Retry mechanism for deleting the policy
          retries = 5
          for i in range(retries):
              try:
                  # Delete the customer managed policy
                  iam_client.delete_policy(
                      PolicyArn=policy_arn
                  )
                  print(f"Deleted policy: {policy_arn}")
                  break
              except ClientError as e:
                  if e.response['Error']['Code'] == 'DeleteConflict':
                      print("Delete conflict detected, retrying...")
                      time.sleep(5)  # Wait for 5 seconds before retrying
                  else:
                      raise e
          else:
              print(f"Error: Failed to delete policy {policy_name} after {retries} retries.")
      except ClientError as e:
          print(f"Error: {e}")
    dependencies: |
      boto3==1.34.125
    args:
      permission_set_arn:
        description: The ARN of the permission set to update
        required: true
      policy_name:
        description: The name of the customer managed policy to detach and delete
        required: true
    env:
      - SSO_INSTANCE_ARN # The ARN of the SSO instance to update
      - AWS_PROFILE # The AWS profile to use for the operation (injected automatically by Kubiya)
    # Mount the AWS credentials file in the container from the execution environment
    with_files:
        - source: /home/appuser/.aws/credentials
          destination: /root/.aws/credentials
