tools:
  - name: approve_request
    alias: approve_request
    description: Allows an admin to approve or reject a request for access and schedule the removal of the policy after the TTL expires - can only be run by authorized users (NOT the user who just requested access)
    type: python
    content: |
      import os
      import sqlite3
      import sys
      from datetime import datetime, timedelta, timezone
      import requests
      from pytimeparse.timeparse import timeparse

      APPROVER_USER_EMAIL = os.getenv('KUBIYA_USER_EMAIL')
      APPROVAL_SLACK_CHANNEL = os.getenv('APPROVAL_SLACK_CHANNEL')
      APPROVING_USERS = os.getenv('APPROVING_USERS', '').split(',')
      SLACK_API_TOKEN = os.getenv('SLACK_API_TOKEN')
      KUBIYA_API_KEY = os.getenv('KUBIYA_API_KEY')

      if not APPROVER_USER_EMAIL:
          print("‚ùå Missing APPROVER_USER_EMAIL environment variable")
          sys.exit(1)

      if "{{.approval_action}}" not in ['approved', 'rejected']:
          print("‚ùå Error: Invalid approval action. Use 'approved' or 'rejected'.")
          sys.exit(1)

      if APPROVER_USER_EMAIL not in APPROVING_USERS:
          print(f"‚ùå User {APPROVER_USER_EMAIL} is not authorized to approve this request")
          sys.exit(1)

      request_id = "{{.request_id}}"
      approval_action = "{{.approval_action}}"

      conn = sqlite3.connect('/sqlite_data/approval_requests.db')
      c = conn.cursor()

      # Debugging: Check existing data
      c.execute("SELECT * FROM approvals")
      all_approvals = c.fetchall()
      print(f"All approvals in database: {all_approvals}")
      
      c.execute("SELECT * FROM approvals WHERE request_id=? AND approved='pending'", (request_id,))
      approval_request = c.fetchone()

      if not approval_request:
          print(f"‚ùå No pending approval request found for request ID {request_id}")
          sys.exit(1)

      c.execute("UPDATE approvals SET approved=? WHERE request_id=?", (approval_action, request_id))
      conn.commit()
      conn.close()

      print(f"‚úÖ Approval request with ID {request_id} has been {approval_action}")

      if approval_action == "approved":
          duration_minutes = approval_request[2]

          # Set the future time to remove the policy based on ISO format and duration
          duration_seconds = timeparse(f"{duration_minutes}m")
          if duration_seconds is None:
              raise ValueError("Invalid duration format")

          # Convert duration_seconds to a timedelta
          duration_timedelta = timedelta(seconds=duration_seconds)

          now = datetime.now(timezone.utc)  # Get the current time in UTC with timezone
          schedule_time = now + duration_timedelta
          try:
              schedule_time = schedule_time.isoformat()
          except Exception as e:
              print(f"‚ùå Error: Could not place future deletion time in ISO format: {e}")
              print(f"As a fallback, the policy will be removed in 1 hour.")
              # Fallback to 1 hour
              schedule_time = now + timedelta(hours=1)
              schedule_time = schedule_time.isoformat()
          
          task_payload = {
              "scheduled_time": schedule_time,
              # TODO:: Notify both ends on Slack (easy to do with a dedicated Slack tool)
              "task_description": f"Immediately remove policy {approval_request[3]} from permission set {approval_request[4]} as the TTL has expired",
              "channel_id": APPROVAL_SLACK_CHANNEL,
              "user_email": approval_request[0],
              "organization_name": os.getenv("KUBIYA_USER_ORG"),
              "agent": os.getenv("KUBIYA_AGENT_PROFILE")
          }
          response = requests.post(
              'https://api.kubiya.ai/api/v1/scheduled_tasks',
              headers={
                  'Authorization': f'UserKey {KUBIYA_API_KEY}',
                  'Content-Type': 'application/json'
              },
              json=task_payload
          )

          if response.status_code < 300:
              print(f"‚úÖ Scheduled task to remove policy `{approval_request[3]}` from permission set `{approval_request[4]}` in `{duration_minutes} minutes` (expires at `{schedule_time}`)")
          else:
              print(f"‚ùå Error: {response.status_code} - {response.text}")

      slack_channel_id = approval_request[8]
      slack_thread_ts = approval_request[9]

      # Get permalink
      permalink_response = requests.get(
          "https://slack.com/api/chat.getPermalink",
          params={
              'channel': slack_channel_id,
              'message_ts': slack_thread_ts
          },
          headers={
              'Authorization': f'Bearer {SLACK_API_TOKEN}'
          }
      )
      permalink = permalink_response.json().get("permalink")

      action_emoji = ":white_check_mark:" if approval_action == "approved" else ":x:"
      action_text = "APPROVED" if approval_action == "approved" else "REJECTED"
      approver_text = f"<@{APPROVER_USER_EMAIL}> *{action_text}* your access request {action_emoji}"

      slack_payload_main_thread = {
          "channel": slack_channel_id,
          "text": f"<@{approval_request[0]}>, your request has been {approval_action}.",
          "blocks": [
              {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": f"*Request {approval_action}* {action_emoji}\n*Reason:* {approval_request[1]}\n*Access:* {approval_request[3]} for {approval_request[2]}\n*Status:* {approver_text}\n<{permalink}|View original conversation>\n\nYou can now try your brand new permissions! :rocket:\n\nNote: This permission will be removed automatically after {approval_request[2]} minutes\n\nPermission policy statement JSON:\n```{approval_request[5]}```\n\n*Next steps:* If you have any questions or need further assistance, please reach out to <@{approval_request[0]}>, you can now access the resources you requested with the permissions granted."
                  }
              },
              {
                  "type": "actions",
                  "elements": [
                      {
                          "type": "button",
                          "text": {
                              "type": "plain_text",
                              "text": "‚ÜóÔ∏èüí¨ View Thread"
                          },
                          "url": permalink
                      }
                  ]
              }
          ],
      }

      slack_payload_in_thread = {
          "channel": slack_channel_id,
          "text": f"<@{approval_request[0]}>, your request has been {approval_action}.",
          "thread_ts": slack_thread_ts,
          "blocks": [
              {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": f"*Good news!* {approver_text} :tada:\n\nGo ahead and try your brand new permissions! :rocket:\n\nNote: This permission will be removed automatically after *{approval_request[2]}*\n\nPermission policy statement JSON:\n```{approval_request[5]}```"
                  }
              }
          ]
      }

      for slack_payload in [slack_payload_main_thread, slack_payload_in_thread]:
        slack_response = requests.post(
            "https://slack.com/api/chat.postMessage",
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {SLACK_API_TOKEN}'
            },
            json=slack_payload
        )

        # Remove expired requests
        conn = sqlite3.connect('/sqlite_data/approval_requests.db')
        c = conn.cursor()
        c.execute("DELETE FROM approvals WHERE expires_at < ?", (datetime.utcnow().isoformat(),))
        conn.commit()
        conn.close()
        
        if slack_response.status_code < 300:
            print(f"‚úÖ All done! Slack notification sent successfully")
        else:
            print(f"‚ùå Error sending Slack notification: {slack_response.status_code} - {slack_response.text}")

    args:
      request_id:
        description: The unique identifier for the request being approved or rejected
        required: true
      approval_action:
        description: Approval action (approved or rejected)
        required: true
    env:
      - KUBIYA_USER_EMAIL # The email of the user approving the request
      - APPROVING_USERS # A comma-separated list of users who are authorized to approve requests
      - APPROVAL_SLACK_CHANNEL # The Slack channel ID for approval notifications
      - SLACK_API_TOKEN # The Slack API token for sending messages
      - KUBIYA_API_KEY # The API key for the Kubiya API
      - KUBIYA_USER_ORG # The organization name (injected automatically by Kubiya)
      - KUBIYA_AGENT_PROFILE # The agent profile to use for the scheduled task (injected automatically by Kubiya)
    dependencies: |
      requests
      pytimeparse==1.1.8
    with_volumes:
      - name: sqlite_data
        path: /sqlite_data
